=================== truthly  ============================================

In JavaScript, a truthy value is a value that is considered  true when encountered in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, "", null, undefined, and NaN).

JavaScript uses type coercion in Boolean contexts.

Examples of truthy values in JavaScript (which will be coerced to true in boolean contexts, and thus execute the if block):

if (true)
if ({})
if ([])
if (42)
if ("0")
if (new Date())
if (-42)
if (12n)
if (3.14)
if (-3.14)
if (Infinity)
if (-Infinity)


====================== falsy ==========================================

A falsy value is a value that is considered false when encountered in a Boolean context.

 

JavaScript uses Type Conversion to coerce any value to a Boolean in contexts that require it, such as conditionals and loops.

 

There are only 6 falsy values in JavaScript

This means that when JavaScript is expecting a boolean and it is given one of the values below, it will always evaluate to “falsy”

false	The keyword false
0	The number zero.
BigInt, when used as a boolean, follows the same rule as a Number. 0n is falsy.

"", '', ``	
This is an empty string(the length of the string is zero).

Strings in JavaScript can be defined with double quotes "", or single quotes '', as well as Template literals ``

null	null  - the absence of any object value
undefined	undefined - the primitive value
NaN	NaN - not a number
 

 

ExamplesEditSection
Examples of falsy values in JavaScript (which are coerced to false in Boolean contexts, and thus bypass the if block):

if (false)
if (null)
if (undefined)
if (0)
if (0n)
if (NaN)
if ('')
if ("")
if (``)
if (document.all)
 

The logical AND operator, &&Section
If the first object is falsy, it returns that object

let pet = false && "dog";

// ↪ false
 

document.all has been used for browser detection in the past and the HTML specification defines a willful violation of the ECMAScript standard here to keep compatibility with legacy code (if (document.all) { // Internet Explorer code here(except IE11) } or using document.all without checking its presence first: document.all.foo).

Sometimes written falsey, although in English usually turning a word into an adjective with a -y, any final e is dropped (noise => noisy, ice => icy, shine => shiny)


================= Truthy and Falsy Values in JavaScript =====================================

Truthy and Falsy Values in JavaScript http://adripofjavascript.com/blog/drips/truthy-and-falsy-values-in-javascript.html
Originally published in the A Drip of JavaScript newsletter.

Longtime JavaScript developers often toss around the terms "truthy" and "falsy", but for those who are newer to JavaScript these terms can be a bit mystifying.

When we say that a value is "truthy" in JavaScript, we don't just mean that the value is true. Rather, what we mean is that the value coerces to true when evaluated in a boolean context. Let's look at what that means.

      function logTruthiness (val) {
          if (val) {
              console.log("Truthy!");
          } else {
              console.log("Falsy.");
          }
      }
      
This function takes the val parameter and evaluates it in a boolean context (the condition of the if statement.) So let's try it out on some values.

        // Outputs: "Truthy!"
        logTruthiness(true);

        // Outputs: "Truthy!"
        logTruthiness({});

        // Outputs: "Truthy!"
        logTruthiness([]);

        // Outputs: "Truthy!"
        logTruthiness("some string");

        // Outputs: "Truthy!"
        logTruthiness(3.14);

        // Outputs: "Truthy!"
        logTruthiness(new Date());
        
As you can see, there are a lot of truthy values in JavaScript. And there are many more than could be listed here. On the other side, though, there are only six falsy values. In fact, because the list of falsy values is so short, memorizing that list is the easiest way to tell whether a value is truthy or falsy. Here is the list:

            // Outputs: "Falsy."
            logTruthiness(false);

            // Outputs: "Falsy."
            logTruthiness(null);

            // Outputs: "Falsy."
            logTruthiness(undefined);

            // Outputs: "Falsy."
            logTruthiness(NaN);

            // Outputs: "Falsy."
            logTruthiness(0);

            // Outputs: "Falsy."
            logTruthiness("");
            
That's a pretty straightforward list. But how can we actually use truthiness? Let's look at an example.

                  function reportAttitude (person) {
                      if (person.skepticism) {
                          console.log(person.name +
                                      " is skeptical about " +
                                      person.skepticism);
                      } else {
                          console.log(person.name + " wants to believe.");
                      }
                  }

                  var mulder = {
                      name: "Fox Mulder"
                  };

                  var scully = {
                      name: "Dana Scully",
                      skepticism: "UFOs & conspiracy theories"
                  };

                  var frohikey = {
                      name: "Melvin Frohikey",
                      skepticism: ""
                  };

                  // Outputs: "Fox Mulder wants to believe."
                  reportAttitude(mulder);

                  // Outputs: "Dana Scully is skeptical about UFOs and conspiracy theories."
                  reportAttitude(scully);

                  // Outputs: "Melvin Frohikey wants to believe."
                  reportAttitude(frohikey);
                  
Taking advantage of truthiness can make your code a little bit more concise. We don't need to explicitly check for undefined, "", etc. Instead we can just check whether person.skepticism is truthy. However, there some caveats to keep in mind.

Firstly, this approach only works if all of the falsy values should be excluded (or included.) For instance, if a value of 0 or "" was meaningful, then the if above would not function correctly.

Secondly, it is important to keep in mind that truthiness is not the same as == true. The algorithm for loose equality is much more complicated than for truthiness. We'll go into more detail about that in a future drip.

I hope this introduction to truthiness and falsiness helps you to write clearer, more concise JavaScript.
